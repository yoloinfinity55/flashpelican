<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>RachelsCreative2020 - Tech</title><link href="https://yoloinfinity55.github.io/flashpelican/" rel="alternate"/><link href="https://yoloinfinity55.github.io/flashpelican/feeds/tech.atom.xml" rel="self"/><id>https://yoloinfinity55.github.io/flashpelican/</id><updated>2025-10-15T12:00:00-04:00</updated><entry><title>How to Deploy a Pelican Site to GitHub Pages</title><link href="https://yoloinfinity55.github.io/flashpelican/how-to-deploy-a-pelican-site-to-github-pages.html" rel="alternate"/><published>2025-10-15T12:00:00-04:00</published><updated>2025-10-15T12:00:00-04:00</updated><author><name>Infinity55</name></author><id>tag:yoloinfinity55.github.io,2025-10-15:/flashpelican/how-to-deploy-a-pelican-site-to-github-pages.html</id><summary type="html">&lt;p&gt;Deploying a Pelican static site to GitHub Pages is a common and effective way to host it for free. This guide details how to automate the process, so your site updates automatically whenever you push new content.&lt;/p&gt;
&lt;p&gt;We will deploy a &lt;strong&gt;Project Page&lt;/strong&gt; to the URL &lt;code&gt;https://yoloinfinity55.github.io …&lt;/code&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;Deploying a Pelican static site to GitHub Pages is a common and effective way to host it for free. This guide details how to automate the process, so your site updates automatically whenever you push new content.&lt;/p&gt;
&lt;p&gt;We will deploy a &lt;strong&gt;Project Page&lt;/strong&gt; to the URL &lt;code&gt;https://yoloinfinity55.github.io/flashpelican&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;Step 1: Prepare Your Pelican Site for Production&lt;/h3&gt;
&lt;p&gt;Your site needs to know its final URL.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Open &lt;code&gt;publishconf.py&lt;/code&gt;&lt;/strong&gt;: This file is specifically for production settings.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Set the &lt;code&gt;SITEURL&lt;/code&gt;&lt;/strong&gt;: Find the &lt;code&gt;SITEURL&lt;/code&gt; variable and set it to your full GitHub Pages URL.&lt;/p&gt;
&lt;p&gt;```python&lt;/p&gt;
&lt;h1&gt;In publishconf.py&lt;/h1&gt;
&lt;p&gt;SITEURL = 'https://yoloinfinity55.github.io/flashpelican'
```&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Create a &lt;code&gt;requirements.txt&lt;/code&gt; file&lt;/strong&gt;: This tells the automated process what Python packages to install.&lt;/p&gt;
&lt;p&gt;```bash&lt;/p&gt;
&lt;h1&gt;Run this in your terminal with your virtual environment active&lt;/h1&gt;
&lt;p&gt;pip freeze &amp;gt; requirements.txt
```&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Step 2: Set Up the GitHub Repository&lt;/h3&gt;
&lt;p&gt;Push your Pelican &lt;em&gt;source code&lt;/em&gt; (not the &lt;code&gt;output&lt;/code&gt; folder) to a new GitHub repository.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Create a new repo on GitHub&lt;/strong&gt; named &lt;code&gt;flashpelican&lt;/code&gt; under the &lt;code&gt;yoloinfinity55&lt;/code&gt; account.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Add a &lt;code&gt;.gitignore&lt;/code&gt; file&lt;/strong&gt; to your project to exclude unnecessary files. It should contain at least:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;output/
.venv/
__pycache__/
*.pyc&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Push your project&lt;/strong&gt; to the new repository's &lt;code&gt;main&lt;/code&gt; branch.&lt;/p&gt;
&lt;p&gt;```bash&lt;/p&gt;
&lt;h1&gt;From your project folder&lt;/h1&gt;
&lt;p&gt;git init
git add .
git commit -m "Initial commit of Pelican site"
git branch -M main
git remote add origin https://github.com/yoloinfinity55/flashpelican.git
git push -u origin main
```&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Step 3: Create the GitHub Actions Workflow&lt;/h3&gt;
&lt;p&gt;This Action will automatically build and deploy your site.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Create the workflow directory&lt;/strong&gt;: In your project, create a new folder path: &lt;code&gt;.github/workflows/&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Create a new YAML file&lt;/strong&gt;: Inside that directory, create a file named &lt;code&gt;deploy.yml&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Add the workflow code&lt;/strong&gt;: Paste the following content into &lt;code&gt;deploy.yml&lt;/code&gt;. &lt;strong&gt;Note the important &lt;code&gt;permissions&lt;/code&gt; block&lt;/strong&gt;, which gives the action permission to push the built site to your &lt;code&gt;gh-pages&lt;/code&gt; branch.&lt;/p&gt;
&lt;p&gt;```yaml
name: Deploy Pelican Site to GitHub Pages&lt;/p&gt;
&lt;p&gt;on:
  # Run on pushes to the main branch
  push:
    branches:
      - main&lt;/p&gt;
&lt;p&gt;jobs:
  build-and-deploy:
    runs-on: ubuntu-latest&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;#&lt;span class="w"&gt; &lt;/span&gt;This&lt;span class="w"&gt; &lt;/span&gt;permissions&lt;span class="w"&gt; &lt;/span&gt;block&lt;span class="w"&gt; &lt;/span&gt;is&lt;span class="w"&gt; &lt;/span&gt;essential&lt;span class="w"&gt; &lt;/span&gt;for&lt;span class="w"&gt; &lt;/span&gt;the&lt;span class="w"&gt; &lt;/span&gt;action&lt;span class="w"&gt; &lt;/span&gt;to&lt;span class="w"&gt; &lt;/span&gt;push&lt;span class="w"&gt; &lt;/span&gt;to&lt;span class="w"&gt; &lt;/span&gt;your&lt;span class="w"&gt; &lt;/span&gt;repo
permissions:
&lt;span class="w"&gt;  &lt;/span&gt;contents:&lt;span class="w"&gt; &lt;/span&gt;write

steps:
&lt;span class="w"&gt;  &lt;/span&gt;-&lt;span class="w"&gt; &lt;/span&gt;name:&lt;span class="w"&gt; &lt;/span&gt;Checkout&lt;span class="w"&gt; &lt;/span&gt;repository
&lt;span class="w"&gt;    &lt;/span&gt;uses:&lt;span class="w"&gt; &lt;/span&gt;actions/checkout@v4

&lt;span class="w"&gt;  &lt;/span&gt;-&lt;span class="w"&gt; &lt;/span&gt;name:&lt;span class="w"&gt; &lt;/span&gt;Set&lt;span class="w"&gt; &lt;/span&gt;up&lt;span class="w"&gt; &lt;/span&gt;Python
&lt;span class="w"&gt;    &lt;/span&gt;uses:&lt;span class="w"&gt; &lt;/span&gt;actions/setup-python@v4
&lt;span class="w"&gt;    &lt;/span&gt;with:
&lt;span class="w"&gt;      &lt;/span&gt;python-version:&lt;span class="w"&gt; &lt;/span&gt;&amp;#39;3.10&amp;#39;

&lt;span class="w"&gt;  &lt;/span&gt;-&lt;span class="w"&gt; &lt;/span&gt;name:&lt;span class="w"&gt; &lt;/span&gt;Install&lt;span class="w"&gt; &lt;/span&gt;dependencies
&lt;span class="w"&gt;    &lt;/span&gt;run:&lt;span class="w"&gt; &lt;/span&gt;|
&lt;span class="w"&gt;      &lt;/span&gt;python&lt;span class="w"&gt; &lt;/span&gt;-m&lt;span class="w"&gt; &lt;/span&gt;pip&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;--upgrade&lt;span class="w"&gt; &lt;/span&gt;pip
&lt;span class="w"&gt;      &lt;/span&gt;pip&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;-r&lt;span class="w"&gt; &lt;/span&gt;requirements.txt

&lt;span class="w"&gt;  &lt;/span&gt;-&lt;span class="w"&gt; &lt;/span&gt;name:&lt;span class="w"&gt; &lt;/span&gt;Build&lt;span class="w"&gt; &lt;/span&gt;the&lt;span class="w"&gt; &lt;/span&gt;site
&lt;span class="w"&gt;    &lt;/span&gt;#&lt;span class="w"&gt; &lt;/span&gt;Use&lt;span class="w"&gt; &lt;/span&gt;publishconf.py&lt;span class="w"&gt; &lt;/span&gt;for&lt;span class="w"&gt; &lt;/span&gt;production&lt;span class="w"&gt; &lt;/span&gt;settings
&lt;span class="w"&gt;    &lt;/span&gt;run:&lt;span class="w"&gt; &lt;/span&gt;pelican&lt;span class="w"&gt; &lt;/span&gt;content&lt;span class="w"&gt; &lt;/span&gt;-s&lt;span class="w"&gt; &lt;/span&gt;publishconf.py

&lt;span class="w"&gt;  &lt;/span&gt;-&lt;span class="w"&gt; &lt;/span&gt;name:&lt;span class="w"&gt; &lt;/span&gt;Deploy&lt;span class="w"&gt; &lt;/span&gt;to&lt;span class="w"&gt; &lt;/span&gt;GitHub&lt;span class="w"&gt; &lt;/span&gt;Pages
&lt;span class="w"&gt;    &lt;/span&gt;uses:&lt;span class="w"&gt; &lt;/span&gt;peaceiris/actions-gh-pages@v3
&lt;span class="w"&gt;    &lt;/span&gt;with:
&lt;span class="w"&gt;      &lt;/span&gt;github_token:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;secrets&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GITHUB_TOKEN&lt;/span&gt; &lt;span class="cp"&gt;}&lt;/span&gt;}
&lt;span class="w"&gt;      &lt;/span&gt;publish_dir:&lt;span class="w"&gt; &lt;/span&gt;./output
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;```&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Step 4: Finalize and Deploy&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Commit and push&lt;/strong&gt; your new files (&lt;code&gt;publishconf.py&lt;/code&gt;, &lt;code&gt;requirements.txt&lt;/code&gt;, and the updated &lt;code&gt;.github/workflows/deploy.yml&lt;/code&gt;) to GitHub.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Go to your &lt;code&gt;flashpelican&lt;/code&gt; repository settings&lt;/strong&gt; on GitHub, then click on the &lt;strong&gt;"Pages"&lt;/strong&gt; tab in the left sidebar.&lt;/li&gt;
&lt;li&gt;Under "Build and deployment", set the &lt;strong&gt;Source&lt;/strong&gt; to &lt;strong&gt;"Deploy from a branch"&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Set the &lt;strong&gt;Branch&lt;/strong&gt; to &lt;code&gt;gh-pages&lt;/code&gt; and the folder to &lt;code&gt;/ (root)&lt;/code&gt;. Click &lt;strong&gt;Save&lt;/strong&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The GitHub Action will now run automatically. After a minute or two, your site will be live at: &lt;strong&gt;https://yoloinfinity55.github.io/flashpelican&lt;/strong&gt;```&lt;/p&gt;</content><category term="Tech"/><category term="pelican"/><category term="github"/><category term="deployment"/><category term="automation"/><category term="ci-cd"/></entry><entry><title>Quick Guide: Pelican on an M1 Mac (Markdown)</title><link href="https://yoloinfinity55.github.io/flashpelican/quick-guide-pelican-on-an-m1-mac-markdown.html" rel="alternate"/><published>2025-10-15T11:45:00-04:00</published><updated>2025-10-15T11:45:00-04:00</updated><author><name>Infinity55</name></author><id>tag:yoloinfinity55.github.io,2025-10-15:/flashpelican/quick-guide-pelican-on-an-m1-mac-markdown.html</id><summary type="html">&lt;p&gt;This is a practical, step-by-step guide for installing and setting up the static site generator &lt;strong&gt;Pelican&lt;/strong&gt; on a &lt;strong&gt;Mac mini with an M1 (Apple Silicon) chip&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Pelican is a Python-based tool, so the first steps focus on establishing a clean Python environment.&lt;/p&gt;
&lt;h2&gt;💻 Part 1: Initial M1 Setup (Python &amp;amp; Virtual Environment …&lt;/h2&gt;</summary><content type="html">&lt;p&gt;This is a practical, step-by-step guide for installing and setting up the static site generator &lt;strong&gt;Pelican&lt;/strong&gt; on a &lt;strong&gt;Mac mini with an M1 (Apple Silicon) chip&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Pelican is a Python-based tool, so the first steps focus on establishing a clean Python environment.&lt;/p&gt;
&lt;h2&gt;💻 Part 1: Initial M1 Setup (Python &amp;amp; Virtual Environment)&lt;/h2&gt;
&lt;p&gt;A virtual environment is highly recommended for all Python projects. It isolates the dependencies for Pelican from other Python projects and your system's Python installation.&lt;/p&gt;
&lt;h3&gt;Step 1: Install Python (if not already installed)&lt;/h3&gt;
&lt;p&gt;While macOS comes with a version of Python, it's best practice for development to install the official version.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Download the Official Installer:&lt;/strong&gt; Go to the official Python website's downloads page and look for the latest stable version for &lt;strong&gt;macOS&lt;/strong&gt;. The installer will automatically be an &lt;strong&gt;Apple Silicon (arm64)&lt;/strong&gt; build, which is natively optimized for your M1 chip.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Run the Installer:&lt;/strong&gt; Double-click the downloaded &lt;code&gt;.pkg&lt;/code&gt; file and follow the on-screen prompts.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Verify the Installation:&lt;/strong&gt; Open your &lt;strong&gt;Terminal&lt;/strong&gt; application (Spotlight search: &lt;kbd&gt;Cmd&lt;/kbd&gt; + &lt;kbd&gt;Space&lt;/kbd&gt;, type "Terminal").&lt;/p&gt;
&lt;p&gt;```bash
python3 --version&lt;/p&gt;
&lt;h1&gt;Expected output: Python 3.x.x (where x.x is the version you installed)&lt;/h1&gt;
&lt;p&gt;```&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Step 2: Create Your Project Directory&lt;/h3&gt;
&lt;p&gt;Choose a location for your Pelican site and create a new folder.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;In your Terminal, navigate to your desired location (e.g., a &lt;code&gt;projects&lt;/code&gt; folder in your home directory) and create a new project folder named &lt;code&gt;my-pelican-site&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;bash
mkdir -p ~/projects/my-pelican-site
cd ~/projects/my-pelican-site&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Step 3: Create and Activate a Virtual Environment&lt;/h3&gt;
&lt;p&gt;Use Python's built-in &lt;code&gt;venv&lt;/code&gt; module to create an isolated environment in your new project folder.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Create the Virtual Environment:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;bash
python3 -m venv .venv&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This command creates a new folder named &lt;code&gt;.venv&lt;/code&gt; inside your project directory.&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Activate the Virtual Environment:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;bash
source .venv/bin/activate&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Your Terminal prompt should now change to start with &lt;code&gt;(.venv)&lt;/code&gt;, indicating the environment is active. All packages you install now will only affect this project.&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h2&gt;📦 Part 2: Pelican Installation and Quickstart&lt;/h2&gt;
&lt;p&gt;With the Python environment ready, you can now install Pelican and generate your site.&lt;/p&gt;
&lt;h3&gt;Step 4: Install Pelican&lt;/h3&gt;
&lt;p&gt;Use the Python package installer (&lt;code&gt;pip&lt;/code&gt;) to install Pelican and the Markdown parser (which is recommended for writing content).&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Install Pelican:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;bash
python -m pip install "pelican[markdown]"&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Step 5: Run the Quickstart Script&lt;/h3&gt;
&lt;p&gt;Pelican comes with a quickstart utility to set up the basic structure and configuration.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Run the Quickstart:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;bash
pelican-quickstart&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Answer the Questions:&lt;/strong&gt; The script will ask you a series of questions.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;For questions with a default value in brackets (e.g., &lt;code&gt;[my blog]&lt;/code&gt;), you can press &lt;kbd&gt;Enter&lt;/kbd&gt; to accept it.&lt;/li&gt;
&lt;li&gt;You will be asked for your &lt;strong&gt;URL prefix&lt;/strong&gt;. This is important. If you plan to deploy your site to a domain like &lt;code&gt;https://www.example.com&lt;/code&gt;, enter that here. For now, you can press &lt;kbd&gt;Enter&lt;/kbd&gt; to leave it blank, or enter a placeholder.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Do you want to generate a Makefile? (Y/n)&lt;/strong&gt;: &lt;strong&gt;Y&lt;/strong&gt; (Recommended for easier running).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Do you want to generate a Rakefile? (Y/n)&lt;/strong&gt;: &lt;strong&gt;n&lt;/strong&gt; (Unless you use Ruby Rake).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h2&gt;✍️ Part 3: Create Content and Preview&lt;/h2&gt;
&lt;h3&gt;Step 6: Create Your First Article&lt;/h3&gt;
&lt;p&gt;Pelican content is typically written in Markdown or reStructuredText. The quickstart created a &lt;code&gt;content&lt;/code&gt; folder.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Create a New File:&lt;/strong&gt; Use your preferred text editor (like VS Code, Sublime Text, or &lt;code&gt;nano&lt;/code&gt; in the terminal) to create a new file named &lt;code&gt;first-post.md&lt;/code&gt; inside the &lt;code&gt;content&lt;/code&gt; folder.&lt;/p&gt;
&lt;p&gt;```bash&lt;/p&gt;
&lt;h1&gt;You can use the terminal editor &lt;code&gt;nano&lt;/code&gt;&lt;/h1&gt;
&lt;p&gt;nano content/first-post.md
```&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Add Content:&lt;/strong&gt; Paste the following basic structure, which includes required metadata:&lt;/p&gt;
&lt;p&gt;```markdown
Title: Hello World of Pelican
Date: 2025-10-15 12:00
Category: General
Tags: quickstart, mac-mini, m1&lt;/p&gt;
&lt;p&gt;This is my first post created with Pelican on my M1 Mac mini!
It's super easy to get started once Python and venv are set up.
```&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Save the File:&lt;/strong&gt; If you used &lt;code&gt;nano&lt;/code&gt;, press &lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;O&lt;/kbd&gt;, then &lt;kbd&gt;Enter&lt;/kbd&gt;, then &lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;X&lt;/kbd&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Step 7: Generate Your Static Site&lt;/h3&gt;
&lt;p&gt;This step compiles your content into the final HTML/CSS/JS files.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Generate the Site:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;bash
pelican content&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;The generated files will be placed in the newly created &lt;code&gt;output/&lt;/code&gt; directory.&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Step 8: Preview Your Site Locally&lt;/h3&gt;
&lt;p&gt;Use Pelican's built-in web server to view your site in a browser.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Serve the Site:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;```bash
pelican --listen&lt;/p&gt;
&lt;h1&gt;OR, if you chose to generate a Makefile:&lt;/h1&gt;
&lt;p&gt;make serve
```&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;View in Browser:&lt;/strong&gt; Open your web browser and navigate to:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;http://localhost:8000/&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;You should now see your Pelican site with your new "Hello World of Pelican" post!&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Final Step: Deactivate Environment&lt;/h3&gt;
&lt;p&gt;When you are done working, you should deactivate the virtual environment.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Deactivate:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;bash
deactivate&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Your Terminal prompt will return to normal.&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;To resume work later, just navigate back to your project folder (&lt;code&gt;cd ~/projects/my-pelican-site&lt;/code&gt;) and run &lt;code&gt;source .venv/bin/activate&lt;/code&gt; again.&lt;/p&gt;</content><category term="Tech"/><category term="pelican"/><category term="m1"/><category term="mac"/><category term="python"/><category term="quickstart"/></entry><entry><title>Quick Guide: Pelican on an M1 Mac</title><link href="https://yoloinfinity55.github.io/flashpelican/quick-guide-pelican-on-an-m1-mac.html" rel="alternate"/><published>2025-10-15T11:30:00-04:00</published><updated>2025-10-15T11:30:00-04:00</updated><author><name>Infinity55</name></author><id>tag:yoloinfinity55.github.io,2025-10-15:/flashpelican/quick-guide-pelican-on-an-m1-mac.html</id><summary type="html">&lt;p&gt;Setting up the Pelican static site generator on an Apple Silicon (M1) Mac is straightforward. This guide provides the essential commands to get you up and running quickly.&lt;/p&gt;
&lt;h3&gt;1. Prepare Your Environment&lt;/h3&gt;
&lt;p&gt;First, create a project directory and a Python virtual environment to keep dependencies isolated. This assumes you have …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Setting up the Pelican static site generator on an Apple Silicon (M1) Mac is straightforward. This guide provides the essential commands to get you up and running quickly.&lt;/p&gt;
&lt;h3&gt;1. Prepare Your Environment&lt;/h3&gt;
&lt;p&gt;First, create a project directory and a Python virtual environment to keep dependencies isolated. This assumes you have Python 3 installed from the official Python website.&lt;/p&gt;
&lt;p&gt;Create project folder and move into it&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;mkdir&lt;span class="w"&gt; &lt;/span&gt;-p&lt;span class="w"&gt; &lt;/span&gt;~/projects/my-pelican-site
&lt;span class="nb"&gt;cd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;~/projects/my-pelican-site
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Create and activate a virtual environment&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;python3&lt;span class="w"&gt; &lt;/span&gt;-m&lt;span class="w"&gt; &lt;/span&gt;venv&lt;span class="w"&gt; &lt;/span&gt;.venv
&lt;span class="nb"&gt;source&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;.venv/bin/activate
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;2. Install Pelican&lt;/h3&gt;
&lt;p&gt;With the virtual environment active, use &lt;code&gt;pip&lt;/code&gt; to install Pelican and the Markdown parser.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;python&lt;span class="w"&gt; &lt;/span&gt;-m&lt;span class="w"&gt; &lt;/span&gt;pip&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;pelican[markdown]&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;3. Initialize Your Site&lt;/h3&gt;
&lt;p&gt;Run the Pelican quickstart script and answer the on-screen prompts. Accepting the defaults is fine for now.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pelican-quickstart
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;4. Create Content and Preview&lt;/h3&gt;
&lt;p&gt;Add your first post by creating a new &lt;code&gt;.md&lt;/code&gt; file inside the &lt;code&gt;content/&lt;/code&gt; folder. Then, generate the HTML and start the local server to preview your work.&lt;/p&gt;
&lt;p&gt;Generate the static site into the 'output' folder&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pelican&lt;span class="w"&gt; &lt;/span&gt;content
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Start the local preview server&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pelican&lt;span class="w"&gt; &lt;/span&gt;--listen
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now, you can view your new site by navigating to &lt;code&gt;http://localhost:8000&lt;/code&gt; in your browser.&lt;/p&gt;</content><category term="Tech"/><category term="pelican"/><category term="m1"/><category term="mac"/><category term="python"/><category term="quickstart"/></entry></feed>